<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>interview-issue-list</title>
    <link href="undefined2019/12/19/interview-issue-list/"/>
    <url>2019/12/19/interview-issue-list/</url>
    
    <content type="html"><![CDATA[<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li>线程，进程，携程</li><li>多路复用</li></ul><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ul><li>TCP 三次握手四次挥手</li><li>TCP UDP 的区别，各举出一个使用场景</li><li>滑动窗口</li><li>WebSocket 的原理，为什么使用</li><li>在网站上点击一个按钮，发生了什么</li><li>四层 / 七层网络协议</li></ul><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><ul><li>HashMap 的底层实现，为什么数组加链表</li><li>初始化 HashMap 可以指定哪些参数，分别有什么意义，实际大小一定是我设置的大小么，为什么</li><li>HashMap 是否存在线程安全问题，何种情况线程不安全</li><li>HashMap 1.8 做了哪些优化，为什么（红黑树等）</li><li>头插法存在什么问题，为什么 1.8 要换成尾插法</li><li>ConcurrentHashMap 怎么保证线程安全，底层怎么实现</li><li>Java 1.8 没有 Segment 了，带来哪些影响</li><li>Lock, ReadWriteLock, ReentrantLock，公平锁，锁自旋</li><li>try catch finally 和 lock() unlock() 怎么搭配使用</li><li>synchronized 1.8 前后有什么变化，怎么优化，可不可以指定默认的锁的量级</li><li>volatile 的原理，解决了什么问题，是否可以解决线程安全的问题</li><li>CAS, Fast-Fail, 指令重排序</li><li>线程的三种创建方式，有什么区别</li><li>线程池的创建参数，每个参数什么意义，是否用过 Cached 线程池</li><li>超过 core thread size 之后，新的线程进来，流程什么样</li><li>ForkJoin 线程池有没有了解过</li><li>什么是原子操作？Java 有哪些自己的原子类</li><li>一个方法使用多个原子操作，可不可以保证线程安全</li><li>try-with-resource 解决了什么问题，底层原理</li><li>AIO, BIO, NIO 分别是啥，为什么有 NIO 还要用 Netty</li><li>Netty 的 eventloop 是什么，怎么工作</li><li>Tomcat 性能调优，连接池数据调优</li></ul><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ul><li>怎么定位一个 OOM 问题</li><li>怀疑程序有死锁，怎么看出来</li><li>JVM 线程模型</li><li>JVM 工具，jstat, jstack, jmap, jps 等</li></ul><h3 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h3><ul><li>新生代、老年代</li><li>Young GC, Full GC 分别在什么时候发生</li><li>垃圾回收算法知道哪些</li><li>From 和 To 分别是什么，为什么要设置这两个区</li></ul><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><ul><li>Go 的携程</li><li>Channel 有几种创建方式，带缓存的 Channel 有什么不一样</li><li>数组和 Slice 有什么区别，怎么使用</li><li>Defer 关键字的调用顺序，从执行到返回经历了什么</li><li>一个请求到 Go Server 发生了什么</li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul><li>为什么用缓存，使用缓存有哪些好处？</li><li>Redis 的部署方式，主从，集群，哨兵</li><li>Redis 的数据结构</li><li>Redis 的分布式锁及其实现</li><li>穿透、击穿、雪崩分别在什么场景发生</li></ul><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><ul><li>RocketMQ 是 Pull 模式还是 Push 模式</li><li>Kafka RabbitMQ RocketMQ 的区别</li><li>什么情况下使用消息，有什么好处</li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>为什么使用索引，怎么定义一个索引</li><li>myIsam 和 innoDB 的区别</li><li>索引的底层实现是什么</li><li>B 树，B+ 树，B* 树的区别，为什么索引使用 B+ 树，有什么好处</li><li>悲观锁，乐观锁</li><li>Statement, PreparedStatement</li><li>持久化框架，SQL 注入，怎么防止注入</li><li>慢查询，全表扫描，优化</li><li></li></ul><h3 id="ZK"><a href="#ZK" class="headerlink" title="ZK"></a>ZK</h3><ul><li>Leader, Follower, Observer</li><li>ZK 的选举策略</li><li>ZK 的分布式锁及其实现</li></ul><h3 id="ETCD"><a href="#ETCD" class="headerlink" title="ETCD"></a>ETCD</h3><ul><li>ETCD 的部署方式</li><li>ETCD 的分布式锁及其实现</li></ul><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><ul><li>分布式系统八大不可能假设</li><li>Raft 一致性算法，解决什么问题</li><li>CAP 原理，设计的时候怎么考虑</li><li>BASE 柔性事务</li><li>设计一个分布式锁</li><li>是否了解分布式事务，TCC，Saga，XA 是什么</li></ul><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><ul><li>有没有用过微服务，和单体服务有什么区别</li><li>设计一个微服务的时候要注意什么问题</li><li>Spring Cloud 和 Dubbo, gRPC 的区别</li><li>微服务治理知道哪些？分别什么时候用？</li><li>熔断，限流，灰度发布，降级</li><li>服务注册发现是怎么解决的，调用的时候怎么知道调用哪个实例</li><li>客户端负载均衡有哪些，有什么优劣</li><li>知不知道扩展点，有没有扩展过框架</li><li>Service Mesh 是什么，解决了什么问题，Sidecar 是啥</li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li>单例模式哪些写法，各有什么优势，实际生产一般怎么使用</li><li>双重检查锁的两个 if 各有什么作用</li><li>说出几种创建类设计模式和区别，什么时候用哪个</li><li>如果一段代码连续几百个 if else，每个 if 判断的属性不一致，但是有先后顺序，说出怎么优化</li><li>迪米特法则，开闭原则，里氏替换原则分别是什么</li><li>函数式编程了解吗，什么是 Monad 设计模式</li><li>有没有用过 Reactive 的 rxjava rxjs 之类的</li><li>响应式编程是什么，和异步非阻塞有什么区别，什么是流式编程</li></ul><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><ul><li><p>谈谈你对 TDD 的理解，符合 TDD 的开发流程是怎么样的</p></li><li><p>DDD 的贫血模型和充血模型有什么区别，怎么取舍</p></li><li><p>设计一个秒杀系统，数据量很大，怎么分库分表，怎么处理热点数据</p></li><li><p>设计一个年会抽奖系统，人数未知，奖池已知，怎么尽量保证公平</p></li><li><p>设计一个 gRPC 框架，需要考虑哪些因素</p></li><li><p>设计一个断路器</p></li><li><p>幂等、悬挂、空回滚是什么？设计的时候怎么考虑这些</p></li></ul><h3 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h3><ul><li>谈谈对 CICD 和 DevOps 的理解，有没有实践</li><li>系统可靠度是什么，你们之前的系统是几个9</li><li>是不是系统可靠度越高越好，怎么考虑</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>interview</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>learn-golang</title>
    <link href="undefined2019/12/14/learn-golang/"/>
    <url>2019/12/14/learn-golang/</url>
    
    <content type="html"><![CDATA[<h3 id="Go-学习笔记"><a href="#Go-学习笔记" class="headerlink" title="Go 学习笔记"></a>Go 学习笔记</h3><p>参考：<a href="tour.golang.org">A Tour of Go</a></p><h4 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h4><p><strong>Function</strong></p><ul><li>支持无参数返回，直接返回已命名变量</li><li>支持多值返回</li></ul><h4 id="Flowcontrol"><a href="#Flowcontrol" class="headerlink" title="Flowcontrol"></a>Flowcontrol</h4><p><strong>For</strong></p><ul><li>循环只有 for, while 可视为缺省的 for</li><li>死循环可以直接缺省写成 for { }</li></ul><p><strong>If</strong></p><ul><li>可以执行简单语句，如 <code>if v := math.Pow(x, n); v &lt; lim</code></li><li>if 定义的变量作用域为整个 if-else 代码块</li></ul><p><strong>Switch</strong></p><ul><li>可执行简单语句，作用域为整个 switch 代码块</li><li>默认 case 之后执行 break, 如需往下执行需要以 fallthrough 结束</li><li>case 无需常量，取值不必为整数</li><li>无条件 switch 看做 switch true, case 可加条件判断简化长串 if-then-else</li></ul><p><strong>Defer</strong></p><ul><li>立即求值，外层函数返回后被调用</li><li>被压在栈中，调用顺序为 LIFO</li></ul><h4 id="Moretypes"><a href="#Moretypes" class="headerlink" title="Moretypes"></a>Moretypes</h4><p><strong>Pointer</strong></p><ul><li><code>var p *int</code> 定义指向 int 的指针 p</li><li><code>*p = 21 p</code> 为指向 21 的指针</li><li><code>p := &amp;21</code> 定义一个指向 21 的指针 p</li></ul><p><strong>Struct</strong></p><ul><li>结构体指针允许隐式简介引用，如 (*p).X 可简写为 p.X</li><li>结构体文法，可通过直接列出字段分配结构体，可仅列出部分字段，如 <code>v := Vertex{X: 1}</code></li></ul><p><strong>Slice</strong></p><ul><li><code>a[low : high]</code> 定义了一个 a 中从 low 到 high - 1 的切片</li><li>切片不存储数据，修改切片会同步修改数组中的元素</li><li><code>[]bool {true, true, false}</code> 本质上为创建一个数组再构建一个引用它的切片</li><li>切片的默认行为为 0 到长度，<code>a[0:10]、a[:10]、a[0:]、a[:]</code> 等价</li><li>切片长度为包含元素的个数，容量为切片头到底层数组尾的长度</li><li>make 可以创建切片，<code>b := make([]int, 0, 5)</code> 表示长度为 0 容量为 5</li><li>append 的时候，若底层数组长度不足，会按照 2^n 长度进行扩容</li></ul><p><strong>Range</strong></p><ul><li><code>for i, v := range pows</code> 中，i 为元素下标，v 为 pow[i] 的副本</li><li><code>for i, _ := range pows</code> 等价于 <code>for i := range pows</code></li></ul><p><strong>Map</strong></p><ul><li>顶级类型若只是一个类型名，可省略，<code>map[string]Vertex{&quot;BL&quot;:{1,2}} 等价于 map[string]{&quot;BL&quot;:Vertex{1,2}}</code></li><li>双赋值可检查是否存在，<code>e, ok = m[key]</code> key 不存在时返回零值</li></ul><p><strong>Function</strong></p><ul><li>Go 语言可以将函数以值的方式进行传递</li><li>函数支持闭包：<code>func adder() func(int) int { ... }</code></li></ul><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4><p><strong>Method</strong></p><ul><li><p>可定义特殊接受者，比如 <code>func (v Vertx) Abs() float64 { ... }</code></p></li><li><p>也可为非结构体声明，如</p><pre><code class="go">type MyFloat flaot64func (f MyFloat) Abs() float64{    return float64(f)}</code></pre></li><li><p>可为指针接收者声明方法，可直接修改接受者（值接收为修改副本）</p></li><li><p>指针参数的函数必须接收指针</p></li><li><p>以指针或值为接受者的方法被调用时方法接受者可以为值或指针（实质会被解释成 *p 或 &amp;p）</p></li></ul><p><strong>Interface</strong></p><ul><li><p>接口可看做包含值和具体类型的元组 (value, type)，接口也是值</p></li><li><p>接口类型可保存任何实现了这些方法的值，传递时需遵守 接口/值 定义</p><pre><code class="go">type Abser interface{}type Vertex struct{}func (v *Vertex) Abs() float64{}func main(){    var a Abser    v := Vertex{3, 4}    a = &amp;v //不可使用 a = v 因为实现 Abs() 的是 *Vertex 不是 Vertex    fmt.Print(a.Abs())}</code></pre></li><li><p>底层值为 nil 时接口仍然会被调用，一般需要写判空来处理，nil 接口会调用出错</p></li><li><p>空接口 interface{} 可以保存任意类型值</p></li></ul><p><strong>Assertion</strong></p><ul><li><p>类型断言 i.(T) 提供了访问接口值底层具体值的方法，如 t, ok := i.(T)</p></li><li><p>类型选择 i.(type) 可以从类型断言中选择执行不同的分支</p><pre><code class="go">switch v := i.(type){    case T: //do something    case S: //do something    default: //do something}</code></pre></li></ul><p><strong>Stringer</strong></p><ul><li><p>Stringer 接口的 String() 方法类似于 Java 的 toString()，用法为 <code>func (p Person) String() string { ... }</code></p><pre><code class="go">type Stringer interface {    String() string}</code></pre></li></ul><p><strong>Error</strong></p><ul><li><p>类似 String(), 可以通过重写 Error 方法来打印错误，用法为 <code>func (e *MyError) Error() string { ... }</code></p><pre><code class="go">type error interface{    Error() string}</code></pre></li><li><p>在 <code>func (e ErrNegativeSqrt) Error() string { ... }</code> 内调用 fmt.Sprint(e) 会无限递归</p></li></ul><p><strong>Reader</strong></p><ul><li><p>Read 通过 io.EOF 错误表示遇到数据流结尾</p><pre><code class="go">func main(){    r := strings.NewReader(&quot;Hello, Reader&quot;)    b := make([]byte, 8)    for {        n, err := r.Read(b)        fmt.Printf(&quot;b[:n] = %q\n&quot;, b[:n])        if err == io.EOF {            break;        }    }}</code></pre></li><li><p>常见的一种模式是 io.Reader 包装另一个 io.Reader 之后通过某种方式修改其数据流</p></li></ul><h4 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h4><p><strong>Gorouting</strong></p><ul><li><code>go f (x, y, z)</code> 中，f x y z 的求值发生在当前 Go 程，f 的执行发生在新的 Go 程</li></ul><p><strong>Channel</strong></p><ul><li><p>Channel 为带有类型的管道，可通过 &lt;- 传值</p><pre><code class="go">ch := make(chan int) // 创建信道 chch &lt;- v // v 发送到 chv ：= &lt;- ch // 从 ch 接收值并赋予 v</code></pre></li><li><p>Channel 可设置带缓冲，<code>ch := make(chan int, 100)</code>, 缓冲区填满后，向其发送数据阻塞，缓冲区为空时，接收阻塞</p></li><li><p><code>v, ok := &lt;- ch</code> 中 ok 判断信道是否被关闭了，一般信道无需关闭，除非告诉接受者不再有值</p></li><li><p><code>for i := range c</code> 会不断从信道接收值直到被关闭</p></li><li><p>只有发送者可关闭信道，接受者不可以，通过调用 close (c) 关闭</p></li></ul><p><strong>Select</strong></p><ul><li><p>阻塞直到某个分支可执行，若满足多个，则随机，语法为：</p><pre><code class="go">select{    case c &lt;- x: // 可以给 c 赋值时执行    case &lt;- quit: // 可以从 quit 取值时执行}</code></pre></li><li><p>可使用 default 当条件都不满足时执行</p></li></ul><p><strong>sync.Mutex</strong></p><ul><li><p>提供了互斥锁这种数据结构，通过 Lock 和 Unlock 调用</p></li><li><p>可采用 defer 调用 Unlock 保证互斥锁一定会被解锁</p><pre><code class="go">type SafeCounter struct{    v map[string]int    mux sync.Mutex}func (c *SafeCounter) Inc(key string){    c.mux.Lock()    defer c.mux.Unlock()    return c.v[key]}</code></pre></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>